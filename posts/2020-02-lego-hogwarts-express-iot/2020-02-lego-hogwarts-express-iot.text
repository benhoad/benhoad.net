# LEGOÂ® Hogwarts Express IoT

 - share: lego-hogwarts.png
 - published: 2020-02-23
 - tags: code, learning, stuff, tech

<section data-type="wide">

![The LEGO Hogwarts express box art](lego-hogwarts.png)
_This project was meant to be started and finished in the space of 3-4 weeks prior to Christmas 2018; I was optimistic at best._

</section>

## Introduction

This project started out as being a basic Christmas tree train; I'd never had a proper train set growing up and thought I'd indulge my younger self now. 

The issue with most offerings was if you wanted a decent quality set you'd have to go down the rabbit hole of scale model trains and my initial aim was to get this built asap. Another issue with the cheaper sets were that they were themed almost exclusively to Christmas. 

Being a massive fan of LEGO&#174; it was a no-brainer to opt for one of their sets given their well-known quality control and consistent internal standard when it comes to their train kits/tracks. The Hogwarts express was the perfect choice given the aim of making the train "smart" lending to the illusion of "magic".

The Hogwarts Express kit provided two straight up challenges; firstly, the set isn't motorised by default, and secondly, the kit doesn't come with a track in the box but thankfully it is designed to work on the standard LEGO&#174; train tracks. 

Plenty of solutions exist for motorising LEGO&#174; trains, one of the most popular being electrified tracks. Electrifying the tracks on my project wasn't going to be a safe option largely due to my cat being a fluffy little gremlin that enjoys removing low hanging tree decorations, especially those that are shiny and metallic - they would just end up dropping and shorting the tracks.

The safest solution was internal rechargeable Li-Ion batteries, but I'm not a fan of pulling out batteries to recharge and the persisting wifi connection would result in a slow power draw meaning repeated charging would be needed. 

The solution; a compact uninterrupted power supply setup leveraging a Qi charging circuit to maintain a power connection when the train is stationary at Platform 9&frac34;.

The project can be best categorised into four phases; 

 - Phase 1: Motorisation

 - Phase 2: Independant operation with bespoke power

 - Phase 3: Wifi Ability

 - Phase 4: Basic Homekit control

 - Appendix: Parts list & future plans


## Phase 1: Motorisation

I'm not the first to motorise the Hogwarts Express kit, plenty of videos exist of people who've already modified the train to run using the existing Power Functions offering from LEGO&#174; themselves. 

My one issue I took with some of the popular Hogwarts Express conversions was with the level of exterior aesthetic modification needed to suit their drivetrain. 

One resulted in the forward section of the train's cab being oddly enlarged to suit a downward facing motor, another had the motor hang halfway out the back of the cab to position the gearing just above the back axle, and the easiest method I found to be popular was to rebuild an enlarged coal tender to suit the 9V electrified wheel train motor box.

After looking at these I figured the best method to conceal the motor entirely, and preserve the original look, was to use a custom 3dprinted gearbox housing to drive the rear axle combined with a standard [LEGO&#174; Power Functions M-Motor](https://www.lego.com/en-au/product/lego-power-functions-m-motor-8883). 

LEGO&#174; don't provide detailed spec of their Power Functions motors but given their popularity among hobbyists plenty of details exist on various forums and websites, and in particular this one was extremely helpful as [it compared almost all of the LEGO&#174; motors that have ever existed](https://www.philohome.com/motors/motorcomp.htm). 

When it came to modifying the train I had a few rules, primarily, no mututation to any LEGO&#174; bricks, it would be sacrilege, therefore any reshaping would have to occur with bricks from other sets or anything that doesn't strictly exist in LEGO&#174; form must be 3d printed from scratch. 

The one time I broke the no mutilation rule was when it came to exposing the M-Motor's wiring, but to avoid modifying the motor itself I instead clipped the connector from an unused [control switch](https://www.lego.com/en-au/product/lego-power-functions-control-switch-8869) and attached that to the motor's propiety connector and eventually crimped some standard dupont connectors onto the four exposed wires.

The first step was to size everything up in Fusion 360. From there it was a matter of playing with gears to see how I could drive the rear axle using conventional LEGO&#174; gearing, eventually settling on a direct drive setup. The 3d printed housing went through many iterations.

<section data-type="wide">

![Image](train-3dprints.jpg)

</section>

<label>
The first few versions relied on a worm gear setup however the ratio resulted in rediculously slow locomotion.
</label>

The next step was to figure out the best way to conceal the motor without too much external disruption. Utilizing enthusiast LEGO&#174; CAD libraries I was able to find some parts that could replace some of the internal structure and shell while also matching colours. 

The best "donor" kit I found was the [LEGO&#174; "Burger Bar Fire Rescue"](https://www.lego.com/en-au/product/burger-bar-fire-rescue-60214). Specifically replacing four pieces of the furnace assembly walls with just two that resulted in a larger interal cavity but looked exactly the same on the outside. (the two "WALL ELEMENT 1X4X3" from the Burger Fire kit)
This slight modification allowed the motor to sit further forward from the cab and into the furnace/boiler cavity.

<section data-type="wide">

![Image](train-cad-gearbox.jpg)

</section>

A few months after settling on this 3d printed configuration I'd discovered LEGO&#174;'s [Pick A Brick](https://www.lego.com/en-au/page/static/pick-a-brick) service was open to Australia and ended up redesigning the drivetrain to be 100% LEGO&#174; bricks and was able to move the motor further inside the boiler cavity. This configuration also allowed for both axles to be driven.

![Image](train-bottom-axles.jpg)


<section data-type="block">

<video width="100%"  loop autoplay playsinline>
  <source src="train-test.mp4" type="video/mp4">
</video> 

Initial testing was carried out with the default Power Function 9v AA x6 Battery Pack.

This test utilizes the final iteration of the 3d printed drivetrain. If you look carefully you'll notice the forward large train wheels only rotate periodically when they scuff the track. This was fixed with both the dual axle drivetrain revision and updating the selected rubber o-rings that surround the larger wheels (without them the train doesn't have sufficient traction).

</section>





## Phase 2: Independant operation

The power configuration utilised a compact UPS circuit that could be powered from a 5V source (Qi coil) with two 18650 3.7v Li-ion batteries (with external protection circuits) attached and outputting 9V to drive the motor; the microcontroller is powered using a 5V buck converter off the same 9V supply.

<section data-type="wide">

![Image](train-diagram.png)
_The basic layout of the power supply setup._

![Image](train-motor-diagram.png)
_Power Functions M-Motor connection._

</section>

<section data-type="block">

<video width="100%"  loop autoplay playsinline>
  <source src="train-power-test.mp4" type="video/mp4">
</video>

Working under bespoke battery power with basic motor control programming on the microcontroller and final four wheel drive configuration. Headlights were added later to give the train a bit more life.

</section>


The largest hurdle with the power supply was getting the Qi reciever coil as close to the Qi power transmitter. The first step; creating an underbelly that gets as close to the top of the tracks as possible without scraping and that is slimmer than the width of the caboose but cavernous enough to house the entire Qi coil. Second step; create a compatible track piece that can replace a standard straight piece and house the Qi transmitter.

Thankfully step one was largely solved from leftover parts from other kits (some inverted slopes and 4x1/6x1 bricks), albeit the colours did not match. To get the final complete black look I ordered the same blocks all in black from LEGO's Pick a Brick service. In order to get the bottom piece as slim as possible I 3d printed a 6x6 baseplate with only edge studs and the middle section (where the Qi coil sits) being only 4 layers thick.

<section data-type="wide">

![Image](train-underbelly.png)
_Underbelly plate that contains the train's Qi coil._

</section>

The second step required some planning, initially my hope for docking was to detect the power delivery and stop the train to remain perfectly above the Qi transmitter, however the Qi "handshake" took longer than expected and as a result I needed another way to detect the charging track section. I played with a few ideas using some salvaged switches from a DVD drive but eventually settled on a hall sensor mounted ahead of the Qi coil and an embedded rare earth magnet in the track. The final charging section was printed in two parts; the main base station and the overhanging track section. 

This setup was perfectly fine for the first few days of use but as I suspected, and later discovered, the combination of the weight of the caboose sitting on the track and the heat generated from the Qi transmitter while charging weakened the PLA and over time the overhanging rail sagged. This was eventually replaced with ABS copies.

![Image](train-qi-track.png)
<label> Rare earth magnet is pressed into place and held by friction. </label>

<section data-type="block">

<video width="100%"  loop autoplay playsinline>
  <source src="train-hall-test.mp4" type="video/mp4">
</video>

Testing basic code to react to the presence of the dock magnet. Note the wheels' speed above.

</section>

## Phase 3: Wifi ability

The microcontroller I chose for this project was the [Wemos (now Lolin) D1 Mini](https://docs.wemos.cc/en/latest/d1/d1_mini.html), a small, simple, arduino-compatible board based on the ESP-8266EX meaning it has inherent wifi capabilities, the key to this project. At this stage in the project I had already assembled the basic Wemos stack that comprised the "brains" of the train. The Wemos D1 Mini is sandwiched between a [motor shield ](https://docs.wemos.cc/en/latest/d1_mini_shiled/motor.html) and a D1 mini shaped [protoboard shield](https://docs.wemos.cc/en/latest/d1_mini_shiled/protoboard.html). 

It is worth mentioning at this point I learned that the default firmware on the motor control shield was broken from the factory as I had a V1.0.0 - [this post explains how to flash the shield with fixed firmware](https://hackaday.io/project/18439-motor-shield-reprogramming) - The method requires a USB to serial adapter but a D1 Mini can work in its place as an intermediary. 

Rather than posting code blocks here I have compiled everything into a single Github repo: [https://github.com/benhoad/lego-hogwarts-express-iot](https://github.com/benhoad/lego-hogwarts-express-iot) - Including relevant STLs for 3d printing, keep in mind a lot of the code is still WIP (read 'rushed'...)

The tldr; of it is the Wemos D1 Mini initially connects itself to the predefined wifi credentials and instantiates a simple web server to listen for requests. Much like any web server it's just a matter of setting up your routes and defining responses. I've set up some basic routes that return JSON objects containing the train's state, as well as handling some requests that will update some exposed configuration options.

<section data-type="block">

<video width="100%"  loop autoplay playsinline>
    <source src="train-charge-test.mp4" type="video/mp4">
</video>

When the base light goes blue it means it has detected the Qi coil, and when the internal light goes red the train is charging from the Qi circuit. 

</section>




## Phase 4: Basic Homekit control

[Homebridge](https://homebridge.io/) is something I've been using extensively for many years, it allows anyone to create interfaces for devices that are "smart" but otherwise not already Homekit compatible; older LIFX bulbs and [Xiaomi smart plugs](https://www.mi.com/mj-socket), for example, are something I use that are made more useful with Homekit/Siri integration. I'd never looked at making a complete custom accesory driver for Homebridge until now.

Again I'll keep the relevant code in the [Github repo](https://github.com/benhoad/lego-hogwarts-express-iot). One thing I learned about Homekit is that even with the Homebridge acting as an intermediary the devices attached to it have to conform to a set list of device types. 

For my simple integration I've treated the train as a "smart switch" given it only really has two states; on and off (or "on" and "going home"). 
Some extra routes needed to be added to the Wemos' code to allow for some basic state checking from Homekit, essentially an "is on" request. 

As for referencing the custom train driver I just packaged and installed the module locally with npm. For the train driver's configuration in homebridge it only requires the module name, accessory id, and device url - I haven't setup any form of discovery so for now I've set my router to reserve the train's IP address for consistency.

With the train module installed, configured in homebridge, and with homebridge running any device that has access to the "Home" that the Homebridge hub is associated with will have control over the train. 

At this point the home app or Siri can control the train. An "on" command will start the train at the default speed of 70% and a "off" command will tell the train to "return home" to find the charging dock so that it's ready for the next trip. 

I haven't put the train through a rigorous benchmark but I have managed to (by accident) have it run continuously (at 70% speed) for around 20+ minutes. Standby time is around a few days.

<section data-type="block">

<video width="100%"  loop autoplay playsinline>
  <source src="train-homekit-test.mp4" type="video/mp4">
</video>

End Result: Homekit controlled "smart" LEGO&#174; train that docks to charge when not in use.

</section>



## Appendix: Parts List

Below are a list of project-specific parts, should anyone else want to attempt something similar it's assumed that they have hookup wire, resistors, a soldering iron, a existing homebridge setup etc.

 - [LEGO&#174; Hogwarts Express](https://www.lego.com/en-au/product/hogwarts-express-75955)

 - [LEGO&#174; Power Functions Motor Set](https://www.lego.com/en-au/product/power-functions-motor-set-8293) for M-Motor and Swtich. (for brick terminal) 

 - [LEGO&#174; Burger Bar Fire Rescue](https://www.lego.com/en-au/product/burger-bar-fire-rescue-60214) for supplimentary parts. (Pick A Brick alone my suffice)

 - [LEGO&#174; Pick A Brick service](https://www.lego.com/en-au/page/static/pick-a-brick) for supplimentary parts.

 - [LEGO&#174; City tracks](https://www.lego.com/en-au/product/tracks-60205) - Will need multiple for a single complete circuit.

 - [Wemos/Lolin D1 Mini](https://lolin.aliexpress.com/store/1331105) - other suppliers exist if the official store doesn't stock the exact board.

 - [Motor Control Shield](https://lolin.aliexpress.com/store/1331105) - as above.

 - [Motor Proto Shield](https://lolin.aliexpress.com/store/1331105) - as above.

 - [2x Li-Ion 18650 Batteries](https://www.ebay.com.au/itm/Panasonic-NCR-18650B-3400mAh-Flat-or-Nipple-Top-Li-ion-Rechargeable-Battery/142053029450?ssPageName=STRK%3AMEBIDX%3AIT&_trksid=p2057872.m2749.l2649)

 - [9v DC-DC Boost UPS module](https://www.aliexpress.com/item/32816412117.html?spm=a2g0s.9042311.0.0.27424c4drtztCn) - I opted for without pins.

 - [2x Battery Protection board](https://www.aliexpress.com/item/32816412117.html?spm=a2g0s.9042311.0.0.27424c4drtztCn) - last option on the product.

 - [Qi Coil Reciever Module](https://www.aliexpress.com/item/33002939788.html?spm=a2g0s.9042311.0.0.6dea4c4dWCMMrf)

 - [Qi Charger Bare Circuit - 5W](https://www.aliexpress.com/item/33011415634.html?spm=a2g0s.9042311.0.0.6dea4c4dWCMMrf)

 - [25mm x 1.5mm O-Rings](https://www.amazon.com.au/gp/product/B07D24PBGQ/ref=ppx_yo_dt_b_asin_title_o07_s00?ie=UTF8&psc=1) - for wheel traction.

 - [Micro LEDs](https://www.aliexpress.com/item/32973221500.html?spm=a2g0s.9042311.0.0.24d24c4dZjzwY4) - warm white for headlights.

 - [49e Linear Hall Sensor](https://www.aliexpress.com/wholesale?SearchText=49e) - can be sourced from anywhere.


## Future Plans

The next steps for this project will involve fixing some potential issues before they happen, mostly adding timeouts to events to ensure nothing is stuck in an infinite loop. If the train is running for ten or more minutes, send it home. If the train is finding home for more than two minutes, maybe it's derailed or stuck and should cut power to the motor. 

Once those issues are addressed I'd like to expand the homekit integration, perhaps start out making it work like a dimmer switch, allowing for multiple speeds. Beyond simple on/off control I'd like to experiment with remote track switching and potentially multiple trains... which now that I type this out I realise I'm probably going to end up in crippling debt due to buying a house with a basement or shed to contain my inevitably giant LEGO&#174; train set/s.