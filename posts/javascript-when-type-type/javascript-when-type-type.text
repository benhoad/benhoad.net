# JavaScript: When Type != Type

 - published: 2010-06-13 19:10
 - tags: javascript

After attending the [JavaScript Meetup](http://www.brisjs.com) last Monday I thought it might be interesting to have a look at a few examples of JavaScript's sometimes unexpected behaviour. I've covered a few things before, like [the difference between `substr` and `substring`](/javascript-difference-between-substr-and-substring) and [the problem with `parseInt()`](/javascript-parseint-problem) so here are some other interesting discoveries.

Since the '+' operator exists for strings anything added to a string will be coerced into being a string, numbers included:

<script src="https://gist.github.com/nathanhoad/a3f034eb0e2fc40abdf7f3acf32747fd.js"></script>

The '-' operator, however, doesn't exist for strings so they will be coerced into being numbers, given the opportunity:

<script src="https://gist.github.com/nathanhoad/ccfc2651a689690019c0433b258247f3.js"></script>

When comparing two types (in an `if` statement, for example) JavaScript will attempt to coerce the types to make a match:

<script src="https://gist.github.com/nathanhoad/60cfffc99e3da1bd47df453afdd19415.js"></script>

But sometimes, things don't behave as you would expect:

<script src="https://gist.github.com/nathanhoad/f3c0c7796da7dcad096e1bf1e8d714cd.js"></script>

And then there are cases where types that shouldn't match do:

<script src="https://gist.github.com/nathanhoad/a3167a9f48660583c31f4322a87cd1c1.js"></script>

So that's just a sample of JavaScript's random behaviour but now when you come across phantom errors you can rest assured that you aren't going crazy; it's just JavaScript 

