# An Aseprite MonoGame Pipeline Extension

- published: 2018-07-27
- tags: games

When I first wrote the sprite animation handler for Impulse, my game engine, it was using the JSON output from Aseprite but I've recently rewritten it to handle Aseprite files directly.

The JSON handling was a carry over from a bunch of utilities that I wrote for [Pixel Beach](https://github.com/nathanhoad/pixelbeach).

I hadn't really thought about parsing the Aseprite file directly until I came across a tweet from Noel Berry:

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I wrote a Pipeline extension for parsing the extended JSON output from Aseprite (for separating laters/animation names, etc) but yourâ€™s is a much better approach. I think I might have a crack at it too ðŸ™‚</p>&mdash; Nathan Hoad (@nathanhoad) <a href="https://twitter.com/nathanhoad/status/1019075354651078657?ref_src=twsrc%5Etfw">July 17, 2018</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

The main benefit of handling the binary data directly is removing a manual step from the build process but it also opened up access to meta data that didn't exist in the JSON output.

After a week or so of development (and borrowing a lot from Noel's implementation) I have something working. Not everything is finished but there is enough there for what I need at the moment:

<script src="https://gist.github.com/nathanhoad/bf9ddac2e13a5aaa922182005f3da6e5.js"></script>

Thanks again to [Noel](https://twitter.com/NoelFB).
